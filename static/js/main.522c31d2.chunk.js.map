{"version":3,"sources":["componentes/TodoForm.js","componentes/Todo.js","componentes/ListaTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","adicionarTarefa","useState","id","tarefa","completa","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","TextField","color","label","name","type","variant","value","onChange","target","IconButton","Todo","ativarCompleta","removerTarefa","ListItem","style","display","Checkbox","checked","onClick","Typography","textDecoration","ListaTodo","todos","List","map","key","App","darkMode","setDarkMode","tema","createMuiTheme","palette","tema2","setTodos","useEffect","armazenarTarefas","JSON","parse","localStorage","getItem","setItem","stringify","ThemeProvider","theme","Paper","minHeight","Switch","marginBottom","marginTop","height","width","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.522c31d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextField, IconButton } from \"@material-ui/core\";\r\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n//função para armazenar o estado do objeto todoForm\r\nfunction TodoForm({ adicionarTarefa }) {\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    tarefa: \"\",\r\n    completa: false,\r\n  });\r\n\r\n  //função para lidar com a digitação no input\r\n  function lidarTarefa(e) {\r\n    setTodo({ ...todo, tarefa: e.target.value });\r\n  }\r\n\r\n  //função para lidar com o submit do botão\r\n  function lidarSubmit(e) {\r\n    e.preventDefault();\r\n    if (todo.tarefa.trim()) {\r\n      adicionarTarefa({ ...todo, id: uuid() });\r\n      //resetando o input\r\n      setTodo({ ...todo, tarefa: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form-todo\" onSubmit={lidarSubmit}>\r\n      <TextField\r\n        color=\"secondary\"\r\n        id=\"outlined-secundary\"\r\n        label=\"A fazer\"\r\n        name=\"tarefa\"\r\n        type=\"text\"\r\n        variant=\"outlined\"\r\n        value={todo.tarefa}\r\n        onChange={lidarTarefa}\r\n      ></TextField>\r\n      <IconButton color=\"inherit\" type=\"submit\">\r\n        <AddBoxIcon></AddBoxIcon>\r\n      </IconButton>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport { Typography, ListItem, IconButton, Checkbox } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction Todo({ todo, ativarCompleta, removerTarefa }) {\r\n  function lidarClickCheckbox() {\r\n    ativarCompleta(todo.id);\r\n  }\r\n\r\n  function lidarClickRemover() {\r\n    removerTarefa(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completa} onClick={lidarClickCheckbox}></Checkbox>\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completa ? \"line-through\" : null,\r\n        }}\r\n      >\r\n        {todo.tarefa}\r\n      </Typography>\r\n      <IconButton color=\"inherit\" onClick={lidarClickRemover}>\r\n        <DeleteIcon></DeleteIcon>\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { List } from \"@material-ui/core\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction ListaTodo({ todos, ativarCompleta, removerTarefa }) {\r\n  return (\r\n    <List>\r\n      {todos.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          ativarCompleta={ativarCompleta}\r\n          removerTarefa={removerTarefa}\r\n        ></Todo>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default ListaTodo;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Typography, Paper, Switch } from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport \"./App.css\";\nimport TodoForm from \"./componentes/TodoForm\";\nimport ListaTodo from \"./componentes/ListaTodo\";\n\nconst LOCAL_STORAGE_KEY = \"desafio-front-todos\";\n\nfunction App() {\n  //criando o darkMode\n  const [darkMode, setDarkMode] = useState(false);\n\n  const tema = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n\n  const tema2 = createMuiTheme({\n    palette: {\n      type: darkMode ? \"light\" : \"dark\",\n    },\n  });\n\n  //estado da lista de todos\n  const [todos, setTodos] = useState([]);\n\n  //armazenando tarefas inicialmente\n  useEffect(() => {\n    const armazenarTarefas = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY)\n    );\n    if (armazenarTarefas) {\n      setTodos(armazenarTarefas);\n    }\n  }, []);\n\n  //armazenando tarefas durante o uso\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  //função de adicionar a tarefa utilizando o hook useState\n  function adicionarTarefa(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  //função para marcar a tarefa como 'concluída'\n  function ativarCompleta(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completa: !todo.completa,\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  //função para remover a tarefa\n  function removerTarefa(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  return (\n    <ThemeProvider theme={tema}>\n      <Paper style={{ minHeight: \"120vh\" }}>\n        <div className=\"App\">\n          <Switch\n            checked={darkMode}\n            onChange={() => setDarkMode(!darkMode)}\n          ></Switch>\n          <Typography style={{ marginBottom: 200, marginTop: 50 }} variant=\"h2\">\n            Todo List\n          </Typography>\n          <ThemeProvider theme={tema2}>\n            <Paper style={{ height: \"10vh\", width: \"50vh\", padding: 30 }}>\n              <TodoForm adicionarTarefa={adicionarTarefa}></TodoForm>\n            </Paper>\n          </ThemeProvider>\n          <ListaTodo\n            todos={todos}\n            ativarCompleta={ativarCompleta}\n            removerTarefa={removerTarefa}\n          ></ListaTodo>\n        </div>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}